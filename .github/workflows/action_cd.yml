name: Deploy to Production
on:
  push:
    branches:
      - staging

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    runs-on: ubuntu-24.04
    env:
      DOCKER_BUILDKIT: 1
      RAILS_ENV: production
      BUNDLE_WITHOUT: "development test"
      BUNDLE_WITH: tools
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Decode SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          # 設定 SSH 代理
          cat <<EOT >> ~/.ssh/config
          Host bastion
            Hostname 18.179.12.69
            User ec2-user
            Port 22345
            IdentityFile ~/.ssh/id_rsa
            ForwardAgent yes

          Host staging_io
            Hostname 172.31.45.33
            User ec2-user
            Port 22
            ProxyCommand ssh -q -W %h:%p bastion
            IdentityFile ~/.ssh/id_rsa
          EOT

          ssh-keyscan -H 18.179.12.69 >> ~/.ssh/known_hosts
          ssh-keyscan -H 172.31.45.33 >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/config
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Test SSH Proxy to Staging
        run: |
          echo "Testing SSH connection to bastion..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@18.179.12.69 -p 22345 echo "Connected to bastion"
      
          echo "Testing SSH connection to staging_io through bastion..."
          ssh -o StrictHostKeyChecking=no -J ec2-user@18.179.12.69:22345 ec2-user@172.31.45.33 -p 22 echo "Connected to staging_io"

      - name: Deploy with Kamal
        run: bin/kamal deploy -d staging
        env:
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

      # Debugging step if deployment fails
      - name: Check SSH status on failure
        run: |
          if [ $? -ne 0 ]; then
            echo "Job failed, running SSH check"
            ssh-add -l  # List loaded SSH keys
            # Optionally, show part of the SSH private key for debugging
            cat ~/.ssh/id_rsa | head -n 10
            ssh -T -o StrictHostKeyChecking=no -J ec2-user@18.179.12.69:22345 ec2-user@172.31.45.33 -p 22
          fi
        if: failure()  # Ensure this step only runs if a previous step failed
